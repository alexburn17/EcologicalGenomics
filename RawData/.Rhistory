}
}
return(x)
}
dafuck()
dafuck <- function(myvec=vec){
myvec1 <- myvec
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
x <- max(myvec[i]-myvec1[j])
}
}
return(x)
}
dafuck()
dafuck <- function(myvec=vec){
myvec1 <- myvec
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
x[i] <- max(myvec[i]-myvec1[j])
}
}
return(x)
}
dafuck()
dafuck <- function(myvec=vec){
myvec1 <- myvec
mat <- matrix(numeric(100), nrow=legnth(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
x <- myvec[i]-myvec1[j]
}
}
return(mat)
}
dafuck()
dafuck <- function(myvec=vec){
myvec1 <- myvec
mat <- matrix(numeric(100), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
x <- myvec[i]-myvec1[j]
}
}
return(mat)
}
dafuck()
dafuck <- function(myvec=vec){
myvec1 <- myvec
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
x <- myvec[i]-myvec1[j]
}
}
return(mat)
}
dafuck()
dafuck <- function(myvec=vec){
myvec1 <- myvec
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
mat[i,j] <- myvec[i]-myvec1[j]
}
}
return(mat)
}
dafuck()
dafuck <- function(myvec=vec){
myvec1 <- myvec
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
mat[i,j] <- myvec[i]-myvec1[j]
}
}
x <- vector(mat)
return(x)
}
dafuck()
dafuck <- function(myvec=vec){
myvec1 <- myvec
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
mat[i,j] <- myvec[i]-myvec1[j]
}
}
x <- c(mat)
return(x)
}
dafuck()
dafuck <- function(myvec=vec){
myvec1 <- myvec
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
mat[i,j] <- myvec[i]-myvec1[j]
}
}
x <- c(mat)
return(abs(x))
}
dafuck()
vec <- round(runif(10),2)
dafuck <- function(myvec=vec){
myvec1 <- myvec
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec1)){
mat[i,j] <- myvec[i]-myvec1[j]
}
}
x <- c(mat)
return(max(abs(x)))
}
dafuck()
func1 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
return(max(abs(x)))
}
func1()
func1 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
return(list(mat))
}
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
return(list(mat))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
return(list(abs(mat)))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
which(mat==max(abs(mat)), arr.ind=TRUE)
return(list(which(mat==max(abs(mat)), arr.ind=TRUE)))
}
func2()
func2()[[1]]
func2()[[1],1]
str(func2()[[1]])
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list())
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(colnames(mat)[x[,1]], rownames(mat)[x[,2]]))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(x,colnames(mat)[x[,1]], rownames(mat)[x[,2]]))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,3]]
rownames(mat)[x[,2]]
return(list(x,colnames(mat)[x[,1]], rownames(mat)[x[,2]]))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(x,colnames(mat)[x[,1]], rownames(mat)[x[,2]]))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(x,mat,colnames(mat)[x[,1]], rownames(mat)[x[,2]]))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(colnames(mat)[x[,1]], rownames(mat)[x[,2]]))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
x <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(c(colnames(mat)[x[,1]], rownames(mat)[x[,2]])))
}
func2()
vec <- round(runif(10),2)
func1 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
return(max(abs(z)))
}
func1()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(c(colnames(mat)[x[,1]], rownames(mat)[x[,2]]), c((mat)[x[,1]],(mat)[x[,2]]),max(abs(z))))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(c(colnames(mat)[x[,1]], rownames(mat)[x[,2]]), c(mat[x[,1]],mat[x[,2]]),max(abs(z))))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(c(colnames(mat)[x[1]], rownames(mat)[x[2]]), c(mat[x[,1]],mat[x[,2]]),max(abs(z))))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(c(colnames(mat)[x[1,1]], rownames(mat)[x[1,2]]), c(mat[x[,1]],mat[x[,2]]),max(abs(z))))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
colnames(mat)[x[,1]]
rownames(mat)[x[,2]]
return(list(c(colnames(mat)[x[1,1]], rownames(mat)[x[1,2]]), c(mat[x[1,1]],mat[x[1,2]]),max(abs(z))))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
w<-colnames(mat)[x[,1]]
t<-rownames(mat)[x[,2]]
return(list(c(w,t)))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
w<-colnames(mat)[x[,1]]
t<-rownames(mat)[x[,2]]
return(list(c(w,t),max(abs(z))))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
w<-colnames(mat)[x[1,1]]
t<-rownames(mat)[x[1,2]]
return(list(c(w,t),max(abs(z))))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
w<-colnames(mat)[x[1,1]]
t<-rownames(mat)[x[1,2]]
h<-mat[x[1,1]]
k<-mat[x[1,2]]
return(list(c(w,t), c(h,k) ,max(abs(z))))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
w<-colnames(mat)[x[1,1]]
t<-rownames(mat)[x[1,2]]
h<-mat[x[1,1]]
k<-mat[x[1,2]]
return(list(c(w,t), c(h,k) ,max(abs(z)),x))
}
func2()
vec <- round(runif(10),2)
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
w<-colnames(mat)[x[1,1]]
t<-rownames(mat)[x[1,2]]
h<-mat[x[1,1]]
k<-mat[x[1,2]]
return(list(c(w,t), c(h,k) ,max(abs(z)),x))
}
func2()
func2 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec), dimnames = list(myvec,myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
x <- which(mat==max(abs(mat)), arr.ind=TRUE)
w<-colnames(mat)[x[1,1]]
t<-rownames(mat)[x[1,2]]
h<-mat[x[1,1]]
k<-mat[x[1,2]]
return(list(c(w,t), x ,max(abs(z))))
}
func2()
func1 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
return(list(max(abs(z)),mat))
}
func1()
func1 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
return(list(max(abs(z)),mat))
}
func1()
vec <- round(runif(10),2)
vec <- round(runif(10),2)
func1 <- function(myvec=vec){
mat <- matrix(numeric(length(myvec)^2), nrow=length(myvec))
for (i in seq_along(myvec)){
for (j in seq_along(myvec)){
mat[i,j] <- myvec[i]-myvec[j]
}
}
z <- c(mat)
return(list(max(abs(z)),mat))
}
func1()
