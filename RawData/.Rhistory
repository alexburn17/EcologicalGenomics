library(gridExtra)
grid.newpage()
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
Resp <- runif(10)
print(Resp)
plot(x=Time, y=Resp, type="b")
Time <- seq(1,10) # seq makes integer sequence!
print(Time) # PRINT IT!
Resp <- runif(10) # get 10 random numbers
print(Resp) # print it
plot(x=Time, y=Resp, type="b")
xVar <- 1:10
yVar <- runif(10)
dataFrame <- data.frame(xVar,yVar)
dataFrame
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(Z)
}
Regression()
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
return(p)
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot()
RegressionPlot(y=c(1,2,3), x=c(4,5,6))
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return()
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return()
}
RegressionPlot()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- cbind(Pop1, Pop2)
MyDF
MyDF <- as.data.frame(cbind(Pop1, Pop2))
MyDF
MyDF$Pop1
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- as.data.frame(cbind(Pop1, Pop2))
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor1
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(cbind(Pop1, Pop2, Factor1, Factor2))
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(Pop1, Pop2, Factor1, Factor2)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyD)
str(MyDF)
# Create fake Data Set:
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
as.factor(rep("cat", 5), rep("dog", 5))
c(rep("cat", 5), rep("dog", 5))
as.factor(c(rep("cat", 5), rep("dog", 5)))
myANOVA <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
AnModel <- aov(y~x)
z <- list(AnModel, summary(AnModel))
return(z)
}
myANOVA()
myANOVA(x=MyDF$Factor1, y=MyDF$Pop2)
myANOVAplot <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
p <- boxplot(y~x)
return(p)
}
myANOVAplot()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=as.factor(c(rep("cat", 5), rep("dog", 5)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
LogReg <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
z <- list(logRegMod, summary(logRegMod))
return(z)
}
LogReg()
LogReg(x=MyDF$Pop1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
p <- mosaicplot(x=x, y=y)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 3), rep("dog", 17))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(dataMatrix)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(x=dataMatrix,
shade=FALSE)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(xVar=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
library(tcltk)
library(tcltk)
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
library(tcltk)
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0){
n[i+1] <- NA
cat("Population extinction at time", i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0){
n[i+1] <- NA
cat("Population extinction at time", i-1, "\n")
#     tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
library(tcltk)
library(tcltk)
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0){
n[i+1] <- NA
cat("Population extinction at time", i-1, "\n")
#     tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0){
n[i+1] <- NA
cat("Population extinction at time", i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
m <- matrix(round(runif(20), digits=3), nrow=5)
m <- matrix(round(runif(20), digits=3), nrow=5)
for (i in 1:nrow(m)) {
m[i,] <- m[i,] + i
}
print(m)
m <- matrix(round(runif(20), digits=3), nrow=5)
for (i in 1:nrow(m)) {
for (j in 1:ncol(m)) {
m[i,j] <- m[i,j] + i + j
}
}
print(m)
head(SpeciesAreaCurve())
SpeciesAreaCurve <- function(A=1:5000, c=0.5, z=0.26) {
S <- c*(A^z)
return(S)
}
head(SpeciesAreaCurve())
SpeciesAreaPlot <- function(A=1:5000, c=0.5, z=0.26) {
plot(x=A,y=SpeciesAreaCurve(A=A,c=c,z=z),
type="l",
xlab = "Island Area",
ylab = "S",
ylim = c(0,1000)
)
mtext(paste("c = ", c, "z = ", z), cex=0.7)
return(cat("made a plot"))
}
SpeciesAreaPlot()
setwd("~/EcologicalGenomics/RawData")
list.files()
install.packages("vcfR") # reads in vcf files and proides tools for file conversion
install.packages("adegenet") # pop-genetics package with some handy routines, including PCA and other multivariate methods (DAPC)
library(vcfR)
library(adegenet)
vcf1 <- read.table("SSW_by24inds.hardyMISS.txt")
SpeciesAreaPlot(c=,z=)
head(vcf1)
vcf1 <- read.table("SSW_by24inds.hardyMISS.txt", header=TRUE)
vcf1
list.files()
HWE <- read.table("SSW_by24inds.hardy.txt", header=TRUE)
HWEmissing <- read.table("SSW_by24inds.hardyMISS.txt", header=TRUE)
HWE
gl1 <- vcfR2genlight(HWE)
HWE <- read.table("SSW_by24inds.hardy.txt", header=TRUE)
gl1 <- vcfR2genlight(HWE)
gl1 <- vcfR2genlight(HWE)
HWE <- read.vcfR("SSW_by24inds.hardy.txt", header=TRUE)
HWE <- read.vcfR("SSW_by24inds.hardy.txt")
