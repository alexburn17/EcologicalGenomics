```{r}
```{r}
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, 5.25, 24.5, 7.37, 25.31, 4.78)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF2)
Sum1
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(-39.01, -5, -51.5, -52.48, -5.25, -24.5, -7.37, -25.31, -4.78)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.84
Sum1 <- summary(LineBF2)
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, -5.5, 9, -2.75, -7.62, 5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF)
Sum1
```{r}
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
IsolationCallIC <- c(-1.49, 2.5, 15.25, 14.51, 8, 10, -6, -9, 4.12)
# plot low hearing by isolation call:
plot(x=LowHearingIC, y=IsolationCallIC,
font.lab=2,
pch=19,
ylab="Isolation Call (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Isolation Call IC by Low Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF3 <- lm(IsolationCallIC~LowHearingIC)
line<-abline(LineBF3, col = "blue", lwd=3)
# summary of model R-square = 0.84
Sum2 <- summary(LineBF3)
Sum2
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, -5.25, 24.5, 7.37, 25.31, 4.78)
# plot Echo Location by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.84
Sum2 <- summary(LineBF2)
Sum2
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, -5.5, 9, -2.75, -7.62, 5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.536
Sum1 <- summary(Li
```{r}
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, -5.25, 24.5, 7.37, 25.31, 4.78)
# plot Echo Location by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.848
Sum2 <- summary(LineBF2)
```{r}
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
IsolationCallIC <- c(-1.49, 2.5, 15.25, 14.51, 8, 10, -6, -9, 4.12)
# plot low hearing by isolation call:
plot(x=LowHearingIC, y=IsolationCallIC,
font.lab=2,
pch=19,
ylab="Isolation Call (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Isolation Call IC by Low Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF3 <- lm(IsolationCallIC~LowHearingIC)
line<-abline(LineBF3, col = "blue", lwd=3)
# summary of model R-square = 0.078
Sum3 <- summary(LineBF3)
$$/frac{E_l}{h_l}$$
$$ \[\frac{E_l}{h_l}\] $$
ringIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, -5.5, 9, -2.75, -7.62, 5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.536
Sum1 <- summary(LineBF)
```
print(Sum1)
num <- c(7, 3, 6, 4, 7, 3, 3, 5, 9, 11, 7, 6, 5, 4, 4)
num
mean(num)
sd(num)
install.packages("knitr")
library(knitr)
ls()
rm(list=ls())
setwd("~/Desktop/QueenExperimentBurnham")
QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
library(plyr)
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
ls()
rm(list=ls())
setwd("~/Desktop/QueenExperimentBurnham")
QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
VirusDF <- read.table("RNAVirus.csv", header=TRUE, sep = ",")
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
plot
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
library(gridExtra)
grid.newpage()
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
Resp <- runif(10)
print(Resp)
plot(x=Time, y=Resp, type="b")
Time <- seq(1,10) # seq makes integer sequence!
print(Time) # PRINT IT!
Resp <- runif(10) # get 10 random numbers
print(Resp) # print it
plot(x=Time, y=Resp, type="b")
xVar <- 1:10
yVar <- runif(10)
dataFrame <- data.frame(xVar,yVar)
dataFrame
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(Z)
}
Regression()
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
return(p)
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot()
RegressionPlot(y=c(1,2,3), x=c(4,5,6))
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return()
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return()
}
RegressionPlot()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- cbind(Pop1, Pop2)
MyDF
MyDF <- as.data.frame(cbind(Pop1, Pop2))
MyDF
MyDF$Pop1
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- as.data.frame(cbind(Pop1, Pop2))
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor1
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(cbind(Pop1, Pop2, Factor1, Factor2))
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(Pop1, Pop2, Factor1, Factor2)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyD)
str(MyDF)
# Create fake Data Set:
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
as.factor(rep("cat", 5), rep("dog", 5))
c(rep("cat", 5), rep("dog", 5))
as.factor(c(rep("cat", 5), rep("dog", 5)))
myANOVA <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
AnModel <- aov(y~x)
z <- list(AnModel, summary(AnModel))
return(z)
}
myANOVA()
myANOVA(x=MyDF$Factor1, y=MyDF$Pop2)
myANOVAplot <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
p <- boxplot(y~x)
return(p)
}
myANOVAplot()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=as.factor(c(rep("cat", 5), rep("dog", 5)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
LogReg <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
z <- list(logRegMod, summary(logRegMod))
return(z)
}
LogReg()
LogReg(x=MyDF$Pop1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
p <- mosaicplot(x=x, y=y)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 3), rep("dog", 17))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(dataMatrix)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(x=dataMatrix,
shade=FALSE)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(xVar=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
setwd("~/EcologicalGenomics/EcoGen_20170320_data")
list.files()
H_freq <- read.table("H_AlleleFreqs.frq", header=T)
S_freq <- read.table("S_AlleleFreqs.frq", header=T)
H_freq
head(H_freq)
head(S_freq)
setwd("~/EcologicalGenomics/EcoGen_20170320_data")
list.files()
H_freq <- read.table("H_AlleleFreqs.frq", header=T)
S_freq <- read.table("S_AlleleFreqs.frq", header=T)
head(S_freq)
All_freq <- merge(H_freq, S_freq, by=c("CHROM", "POS"))
str(All_freq) # shows the structure of the data
head(All_freq)
All_freq$diff <- (All_freq$H_ALT - All_freq$S_ALT)
hist(All_freq$diff, breaks=50, col="red", "Allele frequency difference (H-S)")
All_freq$diff
str(All_freq$diff)
summary(All_freq$diff)
str(All_freq) # shows the structure of the data
head(All_freq)
All_freq$diff <- (All_freq$H_ALT - All_freq$S_ALT)
hist(All_freq$diff, breaks=50, col="red", main="Allele frequency difference (H-S)")
fst <- read.table("HvS_Fst.weir.fst", header=T)
All_freq.fst <- merge(All_freq, fst, by=c("CHROM", "POS"))
plot(All_freq.fst$diff, All_freq.fst$WEIR_AND_COCKERHAM_FST, xlab="Allele frequency difference (H-S)", ylab="Fst", main="Healthy vs. Sick SNP divergence")
All_freq.fst[which(All_freq.fst$WEIR_AND_COCKERHAM_FST>0.2),]
