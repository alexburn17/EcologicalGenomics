```{r}
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, 5.25, 24.5, 7.37, 25.31, 4.78)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF2)
Sum1
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(-39.01, -5, -51.5, -52.48, -5.25, -24.5, -7.37, -25.31, -4.78)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation:
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.84
Sum1 <- summary(LineBF2)
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, -5.5, 9, -2.75, -7.62, 5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.568
Sum1 <- summary(LineBF)
Sum1
```{r}
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
IsolationCallIC <- c(-1.49, 2.5, 15.25, 14.51, 8, 10, -6, -9, 4.12)
# plot low hearing by isolation call:
plot(x=LowHearingIC, y=IsolationCallIC,
font.lab=2,
pch=19,
ylab="Isolation Call (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Isolation Call IC by Low Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF3 <- lm(IsolationCallIC~LowHearingIC)
line<-abline(LineBF3, col = "blue", lwd=3)
# summary of model R-square = 0.84
Sum2 <- summary(LineBF3)
Sum2
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, -5.25, 24.5, 7.37, 25.31, 4.78)
# plot Echo Location by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.84
Sum2 <- summary(LineBF2)
Sum2
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, -5.5, 9, -2.75, -7.62, 5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.536
Sum1 <- summary(Li
```{r}
HighHearingIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
EchoLocIC <- c(39.01, 5, 51.5, 52.48, -5.25, 24.5, 7.37, 25.31, 4.78)
# plot Echo Location by high hearing:
plot(x=HighHearingIC, y=EchoLocIC,
font.lab=2,
pch=19,
ylab="Echo Location (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Echo Location IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF2 <- lm(EchoLocIC~HighHearingIC)
line<-abline(LineBF2, col = "blue", lwd=3)
# summary of model R-square = 0.848
Sum2 <- summary(LineBF2)
```{r}
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, 5.5, 9, 2.75, 7.62, 5.69)
IsolationCallIC <- c(-1.49, 2.5, 15.25, 14.51, 8, 10, -6, -9, 4.12)
# plot low hearing by isolation call:
plot(x=LowHearingIC, y=IsolationCallIC,
font.lab=2,
pch=19,
ylab="Isolation Call (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Isolation Call IC by Low Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF3 <- lm(IsolationCallIC~LowHearingIC)
line<-abline(LineBF3, col = "blue", lwd=3)
# summary of model R-square = 0.078
Sum3 <- summary(LineBF3)
$$/frac{E_l}{h_l}$$
$$ \[\frac{E_l}{h_l}\] $$
ringIC <- c(33.95, 4, 50.5, 49.59, 0.5, 15, 10.25, 10.89, 16.55)
LowHearingIC <- c(11.74, 2.5, 13.75, 8.83, -5.5, 9, -2.75, -7.62, 5.69)
# plot low hearing by high hearing:
plot(x=HighHearingIC, y=LowHearingIC,
font.lab=2,
pch=19,
ylab="Low Hearing (independant contrast)",
xlab="High Hearing (independant contrast)",
main=paste("Low Hearing IC by High Hearing IC"))
# fit these data to a linear model and plot line of best fit (generate equation):
LineBF <- lm(LowHearingIC~HighHearingIC)
line<-abline(LineBF, col = "blue", lwd=3)
# summary of model R-square = 0.536
Sum1 <- summary(LineBF)
```
print(Sum1)
num <- c(7, 3, 6, 4, 7, 3, 3, 5, 9, 11, 7, 6, 5, 4, 4)
num
mean(num)
sd(num)
install.packages("knitr")
library(knitr)
ls()
rm(list=ls())
setwd("~/Desktop/QueenExperimentBurnham")
QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
library(plyr)
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
ls()
rm(list=ls())
setwd("~/Desktop/QueenExperimentBurnham")
QueenDF <- read.table("2016QueensHam.csv", header=TRUE, sep = ",")
PollenDF <- read.table("PollenQueens.csv", header=TRUE, sep = ",")
VirusDF <- read.table("RNAVirus.csv", header=TRUE, sep = ",")
library(plyr)
library(ggplot2)
library(grid)
library(dplyr)
library(scales)
aov.out <- aov(Mass~Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
aov.out <- aov(Brood ~ Origin * Time + Error(FieldID), data=QueenDF)
summary(aov.out)
MassSummary <- ddply(QueenDF, c("Origin", "MassDay"), summarise,
n = length(Mass),
mean = mean(Mass, na.rm = TRUE),
sd = sd(Mass, na.rm = TRUE),
se = sd / sqrt(n))
MassSummary <- MassSummary[-c(5,10),]
print(MassSummary)
plot <- ggplot(data = MassSummary,
aes(x = MassDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = NULL, y = "Colony Mass (lbs)", group="the") + coord_cartesian(ylim = c(20, 80), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(.15, .75), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + labs(linetype="Queen Origin") + annotate(geom = "text", x = 70, y = 75, label = "(a)",cex = 6)
BroodSummary <- ddply(QueenDF, c("Origin", "BroodDay"), summarise,
n = length(Brood),
mean = mean(Brood, na.rm = TRUE),
sd = sd(Brood, na.rm = TRUE),
se = sd / sqrt(n))
print(BroodSummary)
plot1 <- ggplot(data = BroodSummary,
aes(x = BroodDay,
y = mean,
group = Origin)
) + geom_point(size=3) + scale_colour_manual(values = c("black", "black")) + labs(x = "Time (days after requeening)", y = "Frames of Brood") + coord_cartesian(ylim = c(2, 7), xlim = c(-5,70)) + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.9)) + geom_line(aes(linetype=Origin), size=1) + scale_fill_brewer(palette = "Paired") + theme_minimal(base_size = 17) + theme(legend.position=c(3, 3), axis.title.y=element_text(margin=margin(0,20,0,0))) + scale_x_continuous(breaks=pretty_breaks(n=10)) + annotate(geom = "text", x = 70, y = 6.5, label = "(b)",cex = 6)
library(gridExtra)
grid.newpage()
grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
plot
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
library(gridExtra)
grid.newpage()
p <- grid.draw(rbind(ggplotGrob(plot), ggplotGrob(plot1), size = "last"))
p
Resp <- runif(10)
print(Resp)
plot(x=Time, y=Resp, type="b")
Time <- seq(1,10) # seq makes integer sequence!
print(Time) # PRINT IT!
Resp <- runif(10) # get 10 random numbers
print(Resp) # print it
plot(x=Time, y=Resp, type="b")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
setwd("~/EcologicalGenomics")
data <- read.table("222_Data/countsdata_trim.txt", header=TRUE, sep = ",", stringsAsFactors = FALSE)
data
data <- read.delim("222_Data/countsdata_trim.txt", header=TRUE, sep = ",", stringsAsFactors = TRUE, row.names = 1)
head(data)
counts <- read.delim("222_Data/countsdata_trim.txt", header=TRUE, sep = ",", stringsAsFactors = TRUE, row.names = 1)
cols <- read.delim("222_Data/cols_data_trim.txt", header=TRUE, sep = ",", stringsAsFactors = TRUE, row.names = 1)
head(cols)
head(counts)
cols
countsm <- as.matrix(counts)
countsm
colsm <- as.matrix(cols)
library(DESeq2)
library(ggplot2)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ day + location + health)
countsTable <- read.delim("222_Data/countsdata_trim.txt", header=TRUE, sep = ",", stringsAsFactors = TRUE, row.names = 1)
head(countsTable)
countsTable <- as.matrix(countsTable)
conds <- read.delim("222_Data/cols_data_trim.txt", header=TRUE, sep = ",", stringsAsFactors = TRUE, row.names = 1)
head(conds)
countsTable <- read.delim("222_Data/countsdata_trim.txt", header=TRUE, sep = ",", stringsAsFactors = TRUE, row.names = 1)
head(countsTable)
countsTable <- as.matrix(countsTable)
conds <- read.delim("222_Data/cols_data_trim.txt", header=TRUE, sep = ",", stringsAsFactors = TRUE, row.names = 1)
head(conds)
colData <- as.matrix(conds)
library(DESeq2)
library(ggplot2)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ day + location + health)
countData <- as.matrix(countsTable)
conds <- read.delim("222_Data/cols_data_trim.txt", header=TRUE, sep = ",", stringsAsFactors = TRUE, row.names = 1)
head(conds)
colData <- as.matrix(conds)
library(DESeq2)
library(ggplot2)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ day + location + health)
countsTable <- read.delim('/222_Data/countsdata_trim.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
setwd("~/EcologicalGenomics")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
countsTable <- read.delim('/222_Data/countsdata_trim.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countsTable <- read.delim('222_Data/countsdata_trim.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("222_Data/cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ day + location + health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
colSums(counts(dds))
hist(colSums(counts(dds)), breaks = 80, xlim=c(0,max(colSums(counts(dds)))))
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))
dds <- DESeq(dds)  # this step takes a loooong time ~4 minutes with the trimmed data set
save(dds, file="dds.trim.Robject")
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
plotMA(res, main="DESeq2", ylim=c(-2,2))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("day"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health","location"))
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i1_g.23138_m.23138", intgroup=(c("status","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = date)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + scale_y_log10(breaks=c(25,100,1000)) + ylim(0,2500)
p
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("day"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health","location"))
d <- plotCounts(dds, gene="TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i1_g.23138_m.23138", intgroup=(c("status","day","location")), returnData=TRUE)
d <- plotCounts(dds, gene="TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i1_g.23138_m.23138", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = day)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + scale_y_log10(breaks=c(25,100,1000)) + ylim(0,2500)
p
set.seed(100)
firstToLearn <- c("str", "?")
operators <- c("%in%", "match", "=", "<-", "<<-", "$", "[",
"[[", "head", "tail", "subset", "with", "assign", "get")
comparisons <- c("all.equal", "identical", "!=", "==", ">", ">=", "<", "<=",  "is.na", "complete.cases",  "is.finite")
basicMath <- c("*", "+", "-", "/", "^", "%%", "%/%", "abs", "sign", "acos", "asin", "atan", "atan2", "sin", "cos", "tan", "ceiling", "floor", "round", "trunc", "signif", "exp", "log", "log10", "log2", "sqrt", "max", "min", "prod", "sum", "cummax", "cummin", "cumprod", "cumsum", "diff", "pmax", "pmin", "range", "mean", "median", "cor", "sd", "var", "rle")
logicalSets <- c("&", "|", "!", "xor", "all", "any", "intersect", "union", "setdiff", "setequal", "which")
vectorsMatrices <- c("c", "matrix", "length", "dim", "ncol", "nrow", "cbind", "rbind", "names", "colnames", "rownames", "t", "diag", "sweep", "as.matrix", "data.matrix")
makingVectors <- c("c", "rep", "rep_len", "seq", "seq_len", "seq_along", "rev", "sample", "choose", "factorial", "combn", "is.character", "is.numeric", "is.logical", "as.character", "as.numeric", "as.logical")
listsDataFrames <- c("list", "unlist",  "data.frame", "as.data.frame", "split", "expand.grid")
output <- c("print", "cat", "message", "warning", "dput", "format", "sink", "capture.output", "sprintf")
readingWritingData <- c("data", "count.fields", "read.csv", "write.csv", "read.delim", "write.delim", "read.fwf", "readLines", "writeLines", "readRDS", "saveRDS", "load", "save")
RFunctions <- c(firstToLearn, operators, comparisons, basicMath, logicalSets, vectorsMatrices, makingVectors, listsDataFrames, output, readingWritingData)
RFunctions <- sample(RFunctions)
classNames <- c("Alger", "Ashlock", "Burnham", "Clark", "Kazenal", "Keller", "Looi", "Makhukov", "Mickuki", "Nevins", "Southgate")
functionAssignments <- rep_len(classNames, length.out=length(RFunctions))
functionsFinal <- data.frame(functionAssignments,RFunctions)
functionsFinal
str(functionsFinal)
set.seed(100)
firstToLearn <- c("str", "?")
operators <- c("%in%", "match", "=", "<-", "<<-", "$", "[",
"[[", "head", "tail", "subset", "with", "assign", "get")
comparisons <- c("all.equal", "identical", "!=", "==", ">", ">=", "<", "<=",  "is.na", "complete.cases",  "is.finite")
basicMath <- c("*", "+", "-", "/", "^", "%%", "%/%", "abs", "sign", "acos", "asin", "atan", "atan2", "sin", "cos", "tan", "ceiling", "floor", "round", "trunc", "signif", "exp", "log", "log10", "log2", "sqrt", "max", "min", "prod", "sum", "cummax", "cummin", "cumprod", "cumsum", "diff", "pmax", "pmin", "range", "mean", "median", "cor", "sd", "var", "rle")
logicalSets <- c("&", "|", "!", "xor", "all", "any", "intersect", "union", "setdiff", "setequal", "which")
vectorsMatrices <- c("c", "matrix", "length", "dim", "ncol", "nrow", "cbind", "rbind", "names", "colnames", "rownames", "t", "diag", "sweep", "as.matrix", "data.matrix")
makingVectors <- c("c", "rep", "rep_len", "seq", "seq_len", "seq_along", "rev", "sample", "choose", "factorial", "combn", "is.character", "is.numeric", "is.logical", "as.character", "as.numeric", "as.logical")
listsDataFrames <- c("list", "unlist",  "data.frame", "as.data.frame", "split", "expand.grid")
output <- c("print", "cat", "message", "warning", "dput", "format", "sink", "capture.output", "sprintf")
readingWritingData <- c("data", "count.fields", "read.csv", "write.csv", "read.delim", "write.delim", "read.fwf", "readLines", "writeLines", "readRDS", "saveRDS", "load", "save")
RFunctions <- c(firstToLearn, operators, comparisons, basicMath, logicalSets, vectorsMatrices, makingVectors, listsDataFrames, output, readingWritingData)
RFunctions <- sample(RFunctions)
classNames <- c("Alger", "Ashlock", "Burnham", "Clark", "Kazenal", "Keller", "Looi", "Makhukov", "Mickuki", "Nevins", "Southgate")
functionAssignments <- rep_len(classNames, length.out=length(RFunctions))
functionsFinal <- data.frame(functionAssignments,RFunctions)
functionsFinal
functionsFinal[,"Burnham"]
functionsFinal["Burnham",]
levels(functionsFinal$functionAssignments)
functionsFinal[3,]
functionsFinal[,3]
filter(functionsFinal, Burnham)
functionsFinal
splitDF <- split(functionsFinal, functionsFinal$functionAssignments)
splitDF$Mickuki
splitDF$Burnham
x <- splitDF$Burnham
x
length(x$RFunctions)
print(x)
x <- runif(10)
y <- runif(10)
x
y
intersect(x, y)
x <- c(3:13)
y <- c(8:18)
intersect(x=x, y=y)
x <- c(1:10)
log2(x)
log(x=x, base=exp(10))
log10(x)
log(x=x, base=10)
log10(x)
dataframe <- cbind(c("blue", "red", "green"), c(1:3))
ln()
dataframe
str(dataframe)
dataframe <- data.frame(cbind(c("blue", "red", "green"), c(1:3)))
dataframe
dataframe <- data.frame(cbind(c("blue", "red", "green"), c(1:3)))
x <- c(1:6)
x
as.matrix(data=x)
as.matrix(x=x)
as.matrix(x=dataframe)
as.matrix(x=x, nrow=6, ncol=2, byrow=TRUE)
as.matrix(x=x, nrow=3, ncol=2, byrow=TRUE)
dataframe <- data.frame(cbind(c("blue", "red", "green"), c(1:3)))
x <- c(1:6)
as.matrix(x=dataframe)
as.matrix(x=x, nrow=3, ncol=2, byrow=TRUE)
matrix(x=x, nrow=3, ncol=2, byrow=TRUE)
as.matrix(data=x, nrow=3, ncol=2, byrow=TRUE)
as.matrix(x=x, nrow=3, ncol=2)
x <- c(1:6)
x
matrix <- as.matrix(x=x, nrow=3, ncol=2)
matrix
matrix <- as.matrix(x=x, ncol=2)
matrix
matrix <- as.matrix(x=dataframe)
str(matrix)
x <- c(1:10)
x
combn(x=x, m = 2, simplify = TRUE)
combn(x=x, m = 3, simplify = TRUE)
matrix(x=c(1:12), nrow=4)
matrix(data=c(1:12), nrow=4)
as.matrix(data=c(1:12), nrow=4)
diag(x=matrix)
matrix <- matrix(data=c(1:12), nrow=4)
diag(x=matrix)
matrix <- matrix(data=c(1:9), nrow=3)
diag(x=matrix)
diag(x=matrix, nrow=2)
diag(x=matrix) <- 3
diag
matrix
diag(x=matrix) <- 3
matrix <- matrix(data=c(1:9), nrow=3)
diag(x=matrix)
diag(x=matrix) <- 3
print(diag(x=matrix) <- 3)
print(matrix)
dataframe <- data.frame(cbind(c("blue", "red", "green"), c(1:3)))
print(dataframe)
colnames(dataframe) <- c("color", "number")
print(dataframe)
x <- runif(10)
print(x)
data.matrix(frame=dataframe)
dataframe <- data.frame(cbind(c("blue", "red", "green"), c(1:3)))
print(dataframe)
data.matrix(frame=dataframe)
range(x)
x <- c(1:10)
range(x)
dataframe <- data.frame(cbind(rep(c("blue", "red", "green"),3), c(1:9)))
print(dataframe)
model <- aov(dataframe$X1~dataframe$X2)
dataframe$X1 <- as.factor(dataframe$X1)
print(dataframe)
str(dataframe)
dataframe <- data.frame(cbind(rep(c("blue", "red", "green"),3), c(1:9)))
dataframe
str(data.frame)
str(dataframe)
dataframe <- data.frame(rep(c("blue", "red", "green"),3), c(1:9))
dataframe$c.1.9.
dataframe <- as.factor(dataframe$X1)
dataframe
dataframe$X1 <- as.factor(dataframe$X1)
dataframe <- data.frame(rep(c("blue", "red", "green"),3), c(1:9))
dataframe$X1 <- as.factor(dataframe$X1)
dataframe <- data.frame(rep(c("blue", "red", "green"),3), c(1:9))
dataframe$X1 <- factor(dataframe$X1)
print(dataframe)
dataframe <- data.frame(rep(c("blue", "red", "green"),3), c(1:9))
dataframe
dataframe <- data.frame(cbind(rep(c("blue", "red", "green"),3), c(1:9)))
dataframe$X1 <- as.factor(dataframe$X1)
print(dataframe)
model <- aov(dataframe$X1~dataframe$X2)
model
str(dataframe)
dataframe$X2 <- as.numeric(dataframe$X2)
print(dataframe)
model <- aov(dataframe$X1~dataframe$X2)
dataframe$X2 <- as.numeric(dataframe$X2)
str(dataframe)
model <- aov(dataframe$X2~dataframe$X1)
summary(dataframe$X1 <- as.factor(dataframe$X1))
summary(model)
capture.output(example(model), file = pdf)
capture.output(model, file = pdf)
capture.output(model, file = NULL)
dataframe <- data.frame(cbind(rep(c("blue", "red", "green"),3), c(1:9)))
dataframe
tail(x=dataframe, n=3)
x <- c(1:10)
diff(x=x)
diff(x=x, differences = 3)
diff(x=x, differences = 2)
diff(x=x, differences = 1)
diff(x=x, differences = 1, lag = 2)
diff(x=x, differences = 1, lag = 3)
diff(x=x, differences = 2)
diff(x=x, differences = 1)
