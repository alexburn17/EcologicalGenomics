mod <- aov(log(viralLoadDF$BombusViralLoad)~viralLoadDF$apiary_near_far)
mod <- aov(log10(viralLoadDF$BombusViralLoad+1)~viralLoadDF$apiary_near_far)
summary(mod)
mod <- aov(log10(viralLoadDF$BombMeanNA+1)~viralLoadDF$apiary_near_far)
summary(mod)
barplot(height=log10(viralLoadDF$BombMeanNA+1), names=viralLoadDF$apiary_near_far)
kruskal.test(viralLoadDF$BombMeanNA, viralLoadDF$apiary_near_far)
glmmPQL()
library(MASS)
glmmPQL()
print(glmmPQL())
print(glmmPQL())
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
VirusModelNA <- select(VirusModelNA, target_name, site, mean)
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
VirusModelNA <- select(VirusModelNA, target_name, site, mean)
library(dplyr)
VirusModelNA <- select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA <- select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA$BombMeanNA[VirusModelNA$BombMeanNA == "NaN"] <- 0
VirusModelHB <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB),
sd = sd(norm_genome_copbeeHB),
se = sd / sqrt(n))
VirusBombPrev <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusBombPrev <- select(VirusBombPrev, target_name, site, mean)
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- select(BombSurv, -City, -Name, -virusBINY_PreFilter)
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
VirusSum <- ddply(BombSurv, c("target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
colors <- c("dodgerblue4", "dodgerblue4", "dodgerblue4")
plot1 <- ggplot(VirusSum, aes(x=target_name, y=mean, fill=target_name)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(x="Virus", y = "% Prevalence")
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
VirusModelNA <- select(VirusModelNA, target_name, site, mean)
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA$BombMeanNA[VirusModelNA$BombMeanNA == "NaN"] <- 0
VirusModelHB <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB),
sd = sd(norm_genome_copbeeHB),
se = sd / sqrt(n))
VirusBombPrev <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusBombPrev <- select(VirusBombPrev, target_name, site, mean)
VirusBombPrev <- dplyr::select(VirusBombPrev, target_name, site, mean)
VirusBombPrev <- rename(VirusBombPrev, c("mean"="BombPrev"))
library(dplyr)
xx <- dplyr::select(BombSurv, site, apiary_near_far, target_name, ShannonDIV, Density, sumApiaries, sumColonies)
xx <- unique(xx)
VirusModelHB <- select(VirusModelHB, target_name, site, mean)
VirusModelHB <- dplyr::select(VirusModelHB, target_name, site, mean)
viralLoadDF <- merge(VirusModelHB, VirusModel, by=c("target_name","site"))
viralLoadDF <- rename(viralLoadDF, c("mean.x"="HBviralLoad", "mean.y"="BombusViralLoad"))
viralLoadDF <- merge(viralLoadDF, xx, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusBombPrev, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusModelNA, by=c("target_name","site"))
viralLoadDF <- viralLoadDF[!viralLoadDF$target_name==("IAPV"),]
viralLoadDF <- viralLoadDF[complete.cases(viralLoadDF),]
x <- split(viralLoadDF, viralLoadDF$target_name)
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
plot(x=log10(x$BQCV$HBviralLoad), y=log10(x$BQCV$BombusViralLoad))
modBQCV <- lm(log10(x$BQCV$BombusViralLoad+1)~log10(x$BQCV$HBviralLoad+1))
summary(modBQCV)
plot(x=x$DWV$BombPrev, y=log10(x$DWV$BombMeanNA))
modDWV1 <- lm(log10(x$DWV$BombMeanNA+1)~x$DWV$BombPrev)
summary(modDWV1)
print(viralLoadDF)
VirusSum <- ddply(BombSurv, c("species", "target_name"), summarise,
n = length(virusBINY),
mean = mean(virusBINY, na.rm=TRUE),
sd = sd(virusBINY, na.rm=TRUE),
se = sd / sqrt(n))
VirusSum
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA$BombMeanNA[VirusModelNA$BombMeanNA == "NaN"] <- 0
VirusModelHB <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB),
sd = sd(norm_genome_copbeeHB),
se = sd / sqrt(n))
VirusBombPrev <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusBombPrev <- dplyr::select(VirusBombPrev, target_name, site, mean)
VirusBombPrev <- rename(VirusBombPrev, c("mean"="BombPrev"))
library(dplyr)
xx <- dplyr::select(BombSurv, site, apiary_near_far, target_name, ShannonDIV, Density, sumApiaries, sumColonies)
xx <- unique(xx)
VirusModelHB <- dplyr::select(VirusModelHB, target_name, site, mean)
viralLoadDF <- merge(VirusModelHB, VirusModel, by=c("target_name","site"))
viralLoadDF <- rename(viralLoadDF, c("mean.x"="HBviralLoad", "mean.y"="BombusViralLoad"))
viralLoadDF <- merge(viralLoadDF, xx, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusBombPrev, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusModelNA, by=c("target_name","site"))
viralLoadDF <- viralLoadDF[!viralLoadDF$target_name==("IAPV"),]
viralLoadDF
viralLoadDF$HBviralLoad[viralLoadDF$HBviralLoad == NA] <- 0
viralLoadDF$HBviralLoad[viralLoadDF$HBviralLoad == "NA"] <- 0
viralLoadDF$HBviralLoad
viralLoadDF$HBviralLoad[viralLoadDF$HBviralLoad == "NA"] <- 0
viralLoadDF
viralLoadDF$HBviralLoad[is.na(viralLoadDF$HBviralLoad)] <- 0
viralLoadDF
x <- split(viralLoadDF, viralLoadDF$target_name)
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
plot(x=log10(x$BQCV$HBviralLoad), y=log10(x$BQCV$BombusViralLoad))
modBQCV <- lm(log10(x$BQCV$BombusViralLoad+1)~log10(x$BQCV$HBviralLoad+1))
summary(modBQCV)
plot(x=x$DWV$BombPrev, y=log10(x$DWV$BombMeanNA))
modDWV1 <- lm(log10(x$DWV$BombMeanNA+1)~x$DWV$BombPrev)
summary(modDWV1)
log10(x$DWV$BombMeanNA+1)
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
ls()
rm(list=ls())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(plyr)
setwd("~/AlgerProjects/2015_Bombus_Survey/CSV_Files")
BombSurv <- read.table("BombSurvNHBS.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
BombSurv <- dplyr::select(BombSurv, -City, -Name, -virusBINY_PreFilter)
BombSurv<-BombSurv[!BombSurv$site==("PITH"),]
BombSurv<-BombSurv[!BombSurv$site==("STOW"),]
BombSurv<-BombSurv[!BombSurv$species==("Griseocollis"),]
BombSurv<-BombSurv[!BombSurv$species==("Sandersonii"),]
VirusModel <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee),
sd = sd(norm_genome_copbee),
se = sd / sqrt(n))
BombSurv$norm_genome_copbee[BombSurv$norm_genome_copbee == 0] <- NA
VirusModelNA <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbee),
mean = mean(norm_genome_copbee, na.rm=TRUE),
sd = sd(norm_genome_copbee, na.rm=TRUE),
se = sd / sqrt(n))
VirusModelNA <- dplyr::select(VirusModelNA, target_name, site, mean)
VirusModelNA <- rename(VirusModelNA, c("mean"="BombMeanNA"))
VirusModelNA$BombMeanNA[VirusModelNA$BombMeanNA == "NaN"] <- 0
VirusModelHB <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(norm_genome_copbeeHB),
mean = mean(norm_genome_copbeeHB),
sd = sd(norm_genome_copbeeHB),
se = sd / sqrt(n))
VirusBombPrev <- ddply(BombSurv, c("target_name", "site"), summarise,
n = length(virusBINY),
mean = mean(virusBINY),
sd = sd(virusBINY),
se = sd / sqrt(n))
VirusBombPrev <- dplyr::select(VirusBombPrev, target_name, site, mean)
VirusBombPrev <- rename(VirusBombPrev, c("mean"="BombPrev"))
library(dplyr)
xx <- dplyr::select(BombSurv, site, apiary_near_far, target_name, ShannonDIV, Density, sumApiaries, sumColonies)
xx <- unique(xx)
VirusModelHB <- dplyr::select(VirusModelHB, target_name, site, mean)
viralLoadDF <- merge(VirusModelHB, VirusModel, by=c("target_name","site"))
viralLoadDF <- rename(viralLoadDF, c("mean.x"="HBviralLoad", "mean.y"="BombusViralLoad"))
viralLoadDF <- merge(viralLoadDF, xx, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusBombPrev, by=c("target_name","site"))
viralLoadDF <- merge(viralLoadDF, VirusModelNA, by=c("target_name","site"))
viralLoadDF <- viralLoadDF[!viralLoadDF$target_name==("IAPV"),]
viralLoadDF$HBviralLoad[is.na(viralLoadDF$HBviralLoad)] <- 0
x <- split(viralLoadDF, viralLoadDF$target_name)
plot(x=log10(x$DWV$HBviralLoad), y=log10(x$DWV$BombusViralLoad))
modDWV <- lm(log10(x$DWV$BombusViralLoad+1)~log10(x$DWV$HBviralLoad+1))
summary(modDWV)
plot(x=log10(x$BQCV$HBviralLoad), y=log10(x$BQCV$BombusViralLoad))
modBQCV <- lm(log10(x$BQCV$BombusViralLoad+1)~log10(x$BQCV$HBviralLoad+1))
summary(modBQCV)
plot(x=x$DWV$BombPrev, y=log10(x$DWV$BombMeanNA))
modDWV1 <- lm(log10(x$DWV$BombMeanNA+1)~x$DWV$BombPrev)
summary(modDWV1)
x$DWV
cbind(x$DWV$apiary_near_far, x$DWV$HBviralLoad, x$DWV$BombusViralLoad)
cbind(x$DWV$site, x$DWV$apiary_near_far, x$DWV$HBviralLoad, x$DWV$BombusViralLoad)
print(viralLoadDF)
viralLoadDF$apiary_near_far <- as.factor(viralLoadDF$apiary_near_far)
library(lme4)
library(MASS)
glmmPQL(x$DWV$BombMeanNA~x$DWV$HBviralLoad)
glmmPQL(x$DWV$BombMeanNA~x$DWV$HBviralLoad, family = gaussian)
glmmPQL(x$DWV$BombMeanNA~x$DWV$HBviralLoad, random=x$DWV$Density, family = gaussian)
glmmPQL(data=x$DWV, fixed = x$DWV$BombMeanNA~x$DWV$HBviralLoad, random=x$DWV$Density, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = x$DWV$BombMeanNA~x$DWV$HBviralLoad, random=x$DWV$Density, family = gaussian)
x$DWV
mod <- glmmPQL(fixed = x$DWV$BombMeanNA~x$DWV$HBviralLoad, random=x$DWV$Density, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = x$DWV$BombMeanNA~x$DWV$HBviralLoad, random=Density, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = x$DWV$BombMeanNA~x$DWV$HBviralLoad, random=x$DWV$site, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = x$DWV$BombMeanNA~x$DWV$HBviralLoad, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~HBviralLoad, random = ~ 1 | site family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~HBviralLoad, random = ~ 1 | site, family = gaussian)
summary(mod)
mod <- glmmPQL(data=x$DWV, fixed = BombMeanNA~HBviralLoad + apiary_near_far, random = ~ 1 | site, family = gaussian)
summary(mod)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~HBviralLoad + apiary_near_far, random = ~ 1 | site, family = gaussian)
summary(mod)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far, random = ~ 1 | site, family = gaussian)
summary(mod)
x$DWV
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~sumApiaries, random = ~ 1 | site, family = gaussian)
summary(mod)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ site, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = gaussian)
iteration 1
summary(mod)
mod <- glmmPQL(data=x$DWV, fixed = BombusViralLoad~apiary_near_far + sumApiaries, random = ~ 1 | site, family = poisson(link = "log"))
summary(mod)
ls()
rm(list=ls())
setwd("~/EcologicalGenomics")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim("RawData/countsdata_trim2.txt",
stringsAsFactors=TRUE,
header = TRUE,
row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("RawData/cols_data_trim.txt",
header=TRUE,
stringsAsFactors=TRUE,
row.names=1)
colData <- as.data.frame(conds)
head(colData)
dim(countData)
dim(colData)
x<- split(colData, colData$location)
colDataInt <- x$int
colDataSub <- x$sub
i <- rownames(colDataInt)
s <- rownames(colDataSub)
countDataInt <- countData[,i]
countDataSub <- countData[,s]
dim(countDataInt)
dim(countDataSub)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
plotMA(res, main="DESeq2", ylim=c(-2,2))
ddsINT <- DESeqDataSetFromMatrix(countData = countDataInt, colData = colDataInt, design = ~ health)
dim(ddsINT)
ddsINT <- ddsINT[ rowSums(counts(ddsINT)) > 100, ]
dim(ddsINT)
colData(ddsINT)$health <- factor(colData(ddsINT)$health, levels=c("H","S"))
ddsINT <- DESeq(ddsINT)
resINT <- results(ddsINT)
resINT <- resINT[order(resINT$padj),]
head(resINT)
summary(resINT)
ddsSUB <- DESeqDataSetFromMatrix(countData = countDataSub, colData = colDataSub, design = ~ health)
dim(ddsSUB)
ddsSUB <- ddsSUB[ rowSums(counts(ddsSUB)) > 100, ]
dim(ddsSUB)
colData(ddsSUB)$health <- factor(colData(ddsSUB)$health, levels=c("H","S"))
ddsSUB <- DESeq(ddsSUB)
resSUB <- results(ddsSUB)
resSUB <- resSUB[order(resSUB$padj),]
head(resSUB)
summary(resSUB)
d <- plotCounts(dds, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
plotMA(resINT, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(ddsINT, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("day"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health","location"))
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("health","location"))
plotMA(res, main="DESeq2", ylim=c(-2,2))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("health"))
plotMA(resINT, main="DESeq2", ylim=c(-2,2))
vsdINT <- varianceStabilizingTransformation(ddsINT, blind=FALSE)
plotPCA(vsdINT, intgroup=c("health"))
plotMA(resSUB, main="DESeq2", ylim=c(-2,2))
vsdSUB <- varianceStabilizingTransformation(ddsSUB, blind=FALSE)
plotPCA(vsdSUB, intgroup=c("health"))
plotMA(res, main="DESeq2 Model 1 (controlling for location)", ylim=c(-2,2))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("health"))
plotMA(resINT, main="DESeq2 Model 2 (Intertidal Only)", ylim=c(-2,2))
vsdINT <- varianceStabilizingTransformation(ddsINT, blind=FALSE)
plotPCA(vsdINT, intgroup=c("health"))
plotPCA(vsdINT, intgroup=c("health"), main="DESeq2 Model 2 (Intertidal Only)")
plotPCA(vsdINT, intgroup=c("health"))
plotMA(res, main="DESeq2 Model 1 (controlling for location)", ylim=c(-2,2))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("health"))
plotMA(resINT, main="DESeq2 Model 2 (Intertidal Only)", ylim=c(-2,2))
vsdINT <- varianceStabilizingTransformation(ddsINT, blind=FALSE)
plotPCA(vsdINT, intgroup=c("health"))
plotMA(resSUB, main="DESeq2 Model 3 (Subtidal Only)", ylim=c(-2,2))
vsdSUB <- varianceStabilizingTransformation(ddsSUB, blind=FALSE)
plotPCA(vsdSUB, intgroup=c("health"))
plot <- plotMA(res, main="DESeq2 Model 1 (controlling for location)", ylim=c(-2,2))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
qual <- plotPCA(vsd, intgroup=c("health"))
qual
library(grid)
grid.newpage()
grid.draw(cbind(ggplotGrob(plot), ggplotGrob(plotSUB), ggplotGrob(plotINT), size = "last"))
multiplot(plot, plotINT, plotSUB, cols=3)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(plot, plotINT, plotSUB, cols=3)
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
qual <- plotPCA(vsd, intgroup=c("health"))
qual
plot <- plotMA(res, main="DESeq2 Model 1 (controlling for location)", ylim=c(-2,2))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
qual <- plotPCA(vsd, intgroup=c("health"))
qual
qualINT <- plotMA(resINT, main="DESeq2 Model 2 (Intertidal Only)", ylim=c(-2,2))
vsdINT <- varianceStabilizingTransformation(ddsINT, blind=FALSE)
plotINT <- plotPCA(vsdINT, intgroup=c("health"))
plotINT
qual <- plotMA(res, main="DESeq2 Model 1 (controlling for location)", ylim=c(-2,2))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plot <- plotPCA(vsd, intgroup=c("health"))
plot
qualINT <- plotMA(resINT, main="DESeq2 Model 2 (Intertidal Only)", ylim=c(-2,2))
vsdINT <- varianceStabilizingTransformation(ddsINT, blind=FALSE)
plotINT <- plotPCA(vsdINT, intgroup=c("health"))
plotINT
qualSUB <- plotMA(resSUB, main="DESeq2 Model 3 (Subtidal Only)", ylim=c(-2,2))
vsdSUB <- varianceStabilizingTransformation(ddsSUB, blind=FALSE)
plotSUB <- plotPCA(vsdSUB, intgroup=c("health"))
plotSUB
multiplot(plot, plotINT, plotSUB, cols=3)
multiplot(qual, qualINT, qualSUB, cols=3)
qual
qual
par(mfrow=c(1,3))
qual <- plotMA(res, main="DESeq2 Model 1 (controlling for location)", ylim=c(-2,2))
qualINT <- plotMA(resINT, main="DESeq2 Model 2 (Intertidal Only)", ylim=c(-2,2))
qualSUB <- plotMA(resSUB, main="DESeq2 Model 3 (Subtidal Only)", ylim=c(-2,2))
