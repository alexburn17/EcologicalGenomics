p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot()
RegressionPlot(y=c(1,2,3), x=c(4,5,6))
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return()
}
Regression()
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return()
}
RegressionPlot()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- cbind(Pop1, Pop2)
MyDF
MyDF <- as.data.frame(cbind(Pop1, Pop2))
MyDF
MyDF$Pop1
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Pop1 <- runif(20)
Pop2 <- runif(20)
MyDF <- as.data.frame(cbind(Pop1, Pop2))
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor1
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(cbind(Pop1, Pop2, Factor1, Factor2))
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- as.data.frame(Pop1, Pop2, Factor1, Factor2)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- c(rep(1, 10), rep(0, 10))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyDF)
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
str(MyD)
str(MyDF)
# Create fake Data Set:
Pop1 <- runif(20)
Pop2 <- runif(20)
Factor1 <- c(rep("A", 10), rep("B", 10))
Factor2 <- as.factor(c(rep(1, 10), rep(0, 10)))
MyDF <- data.frame(Pop1, Pop2, Factor1, Factor2)
MyDF
Regression <- function(x=1:10, y=runif(10)){
regModel <- lm(y~x)
z <- list(regModel, summary(regModel))
return(z)
}
Regression()
Regression(x=MyDF$Pop1, y=MyDF$Pop2)
RegressionPlot <- function(x=1:10, y=runif(10)){
p <- plot(y=y,x=x,pch=21,bg="lightblue",cex=2)
regModel <- lm(y~x)
abline(regModel)
return(p)
}
RegressionPlot()
RegressionPlot(x=MyDF$Pop1, y=MyDF$Pop2)
as.factor(rep("cat", 5), rep("dog", 5))
c(rep("cat", 5), rep("dog", 5))
as.factor(c(rep("cat", 5), rep("dog", 5)))
myANOVA <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
AnModel <- aov(y~x)
z <- list(AnModel, summary(AnModel))
return(z)
}
myANOVA()
myANOVA(x=MyDF$Factor1, y=MyDF$Pop2)
myANOVAplot <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=runif(10)){
p <- boxplot(y~x)
return(p)
}
myANOVAplot()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT <- function(x=as.factor(c(rep("cat", 5), rep("dog", 5))), y=as.factor(c(rep("cat", 5), rep("dog", 5)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
chiModel <- chisq.test(y=y, x=x)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT()
myANOVAplot(x=MyDF$Factor1, y=MyDF$Pop2)
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
LogReg <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
z <- list(logRegMod, summary(logRegMod))
return(z)
}
LogReg()
LogReg(x=MyDF$Pop1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
p <- mosaicplot(x=x, y=y)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONT <- function(x=as.factor(c(rep("cat", 3), rep("dog", 17))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
chiModel <- chisq.test(dataMatrix)
z <- list(chiModel, summary(chiModel))
return(z)
}
myCONT()
myCONT(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(dataMatrix)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
myCONTplot <- function(x=as.factor(c(rep("cat", 10), rep("dog", 10))), y=as.factor(c(rep("0", 10), rep("1", 10)))){
dataMatrix <- rbind(x,y)
p <- mosaicplot(x=dataMatrix,
shade=FALSE)
return(p)
}
myCONTplot()
myCONTplot(x=MyDF$Factor1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(xVar=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
p <- plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return(p)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor2)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x=x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
LogRegplot <- function(x=runif(20), y=as.factor(c(rep("0", 10), rep("1", 10)))){
logRegMod <- glm(y~x,family=binomial(link="logit"))
plot(x=x, y=y,pch=21,bg="tan",cex=2.5)
curve(predict(logRegMod,data.frame(x),type="response"),add=TRUE,lwd=2)
return()
}
LogRegplot()
LogRegplot(x=MyDF$Pop1, y=MyDF$Factor1)
library(tcltk)
library(tcltk)
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
library(tcltk)
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0) {
n[i+1] <- NA
cat("Population extinction at time",
i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0){
n[i+1] <- NA
cat("Population extinction at time", i-1, "\n")
tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
RanWalk <- function(n1 = 50,
times = 100,
lambda = 1.001,
noiseSD = 10){
n <- rep(NA, times)
n[1] <- n1
noise <- rnorm(n=times, mean=0, sd=noiseSD)
for (i in 1:(times-1)){
n[i + 1] <- lambda*n[i] + noise[i]
if(n[i+1] <= 0){
n[i+1] <- NA
cat("Population extinction at time", i-1, "\n")
#     tkbell()
break}
}
return(n)
}
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
plot(RanWalk(), type = "o")
setwd("~/Dropbox/1_Research/SSW/DGE")
ls()
rm(list=ls())
setwd("~/EcologicalGenomics")
par(mfrow=c(1,3))
library("DESeq2")
library("ggplot2")
countsTable <- read.delim("RawData/countsdata_trim2.txt",
stringsAsFactors=TRUE,
header = TRUE,
row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("RawData/cols_data_trim.txt",
header=TRUE,
stringsAsFactors=TRUE,
row.names=1)
colData <- as.data.frame(conds)
head(colData)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
res$log2FoldChange[10]
res$log2FoldChange[1:10]
res$log2FoldChange[1:10]
ls()
rm(list=ls())
setwd("~/EcologicalGenomics")
setwd("~/EcologicalGenomics/Scripts")
library("phyloseq"); packageVersion("phyloseq")
install.packages("phyloseq")
packageVersion("phyloseq")
library("phyloseq")
x = read_biom("metagenome_predictions.L3.biom")
library("phyloseq")
library("DESeq2")
packageVersion("DESeq2")
library("ggplot2")
theme_set(theme_bw())
library('biom')
install.packages("biom")
x = read_biom("metagenome_predictions.L3.biom")
install.packages("phyloseq")
library(bioformat)
install.packages(bioformat)
install.packages(biomformat)
install.packages("biomformat")
library("phyloseq")
library("DESeq2")
packageVersion("DESeq2")
library("ggplot2")
theme_set(theme_bw())
library('biom')
install("biom")
install.packages("biom")
install.packages("Biom")
install.packages("BIOM")
source("https://bioconductor.org/biomformat.R")
source("https://bioconductor.org/biocLite.R")
biocLite("biomformat")
library("biomformat")
a; packageVersion("phyloseq")
packageVersion("phyloseq")
library("biomformat")
x = read_biom("metagenome_predictions.L3.biom")
head(x)
otumat = as(biom_data(x), "matrix")
OTU = otu_table(otumat, taxa_are_rows=TRUE)
library("phyloseq")
biocLite("phyloseq")
library("phyloseq")
library("DESeq2")
library('biom')
biocLite("biom")
library('biom')
library('biom')
x = read_biom("metagenome_predictions.L3.biom")
otumat = as(biom_data(x), "matrix")
OTU = otu_table(otumat, taxa_are_rows=TRUE)
mapping <- import_qiime_sample_data(mapfilename = 'R_map.txt')
packageVersion("DESeq2")
theme_set(theme_bw())
library('biom')
library("biomformat")
x = read_biom("metagenome_predictions.L3.biom")
otumat = as(biom_data(x), "matrix")
OTU = otu_table(otumat, taxa_are_rows=TRUE)
head(OTU)
mapping <- import_qiime_sample_data(mapfilename = 'R_map.txt')
x = read_biom("metagenome_predictions.L3.biom")
head(x)
otumat = as(biom_data(x), "matrix")
OTU = otu_table(otumat, taxa_are_rows=TRUE)
install.packages("RJSONIO")
install.packages("~/EcologicalGenomics/Scripts/biom_0.3.12.tar.gz", repos=NULL, type="source")
library('biom')
x = read_biom("metagenome_predictions.L3.biom")
otumat = as(biom_data(x), "matrix")
OTU = otu_table(otumat, taxa_are_rows=TRUE)
mapping <- import_qiime_sample_data(mapfilename = 'R_map.txt')
library('biom')
x = read_biom("metagenome_predictions.L3.biom")
otumat = as(biom_data(x), "matrix")
OTU = otu_table(otumat, taxa_are_rows=TRUE)
mapping <- import_qiime_sample_data(mapfilename = 'R_map.txt')
x = read_biom("metagenome_predictions.L3.biom")
otumat = as(biom_data(x), "matrix")
OTU = otu_table(otumat, taxa_are_rows=TRUE)
mapping <- import_qiime_sample_data(mapfilename = 'R_map.txt')
phylo <- merge_phyloseq(OTU, mapping)
phylo
final_pheno = phyloseq_to_deseq2(phylo, ~ Final_phenotype)
final_pheno_results = DESeq(final_pheno, test="Wald")
final_pheno_res = results(final_pheno_results)
summary(final_pheno_res)
head(final_pheno_res)
alpha = 0.05
final_pheno_sigtab = final_pheno_res[which(final_pheno_res$padj < alpha), ]
final_pheno_sigtab= cbind(as(final_pheno_sigtab, "data.frame"), as(tax_table(phylo)[rownames(final_pheno_sigtab), ], "matrix"))
head(final_pheno_sigtab)
final_pheno_sigtab
write.table(final_pheno_sigtab, "Final_pheno_L3.txt", sep="\t")
